---
# SPDX-FileCopyrightText: NONE
# SPDX-License-Identifier: CC0-1.0

name: "Auto-release from tag"
permissions: {}
on:
  push:
    tags:
      - "v*.*"
  workflow_call:
    inputs:
      tag-name:
        required: true
        type: "string"

jobs:
  release:
    name: "Release"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: "${{ inputs.tag-name || startsWith(github.ref, 'refs/tags/v') }}"
    concurrency:
      group: "${{ github.repository_id }}-${{ github.workflow }}-release"
      cancel-in-progress: false
    permissions:
      contents: write # Needed to create a release
      id-token: write # Needed to attest build provenance
      attestations: write # Needed to attest build provenance

    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v5
      - name: "Setup Java"
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: "Build the flashable OTA zip"
        id: "build"
        shell: bash
        timeout-minutes: 10
        run: |
          # Building...
          make clean buildotaoss
      - name: "Attest build provenance"
        id: "attest"
        uses: actions/attest-build-provenance@v2
        timeout-minutes: 10
        if: "${{ vars.ATTESTATION == 'true' && github.run_attempt == '1' && steps.build.outputs.ZIP_IS_ALPHA == 'false' && steps.build.outputs.ZIP_BUILD_TYPE_SUPPORTED == 'true' }}"
        with:
          subject-path: "${{ steps.build.outputs.ZIP_FOLDER }}/*.zip"
          show-summary: false
      - name: "ZIP info"
        id: "info"
        run: |
          # Retrieving informations...
          test -n '${{ steps.build.outputs.ZIP_FOLDER }}' || exit 3
          ZIP_FILENAME='${{ steps.build.outputs.ZIP_FILENAME }}'
          ZIP_VERSION='${{ steps.build.outputs.ZIP_VERSION }}'
          ZIP_SHORT_COMMIT_ID='${{ steps.build.outputs.ZIP_SHORT_COMMIT_ID }}'
          ZIP_IS_ALPHA='${{ steps.build.outputs.ZIP_IS_ALPHA }}'
          ZIP_BUILD_TYPE='${{ steps.build.outputs.ZIP_BUILD_TYPE }}'
          ZIP_BUILD_TYPE_SUPPORTED='${{ steps.build.outputs.ZIP_BUILD_TYPE_SUPPORTED }}'
          ZIP_MD5='${{ steps.build.outputs.ZIP_MD5 }}'
          ZIP_SHA256='${{ steps.build.outputs.ZIP_SHA256 }}'
          ZIP_ATTESTATION_URL='${{ steps.attest.outputs.attestation-url }}'
          # Displaying informations...
          printf '%s\n' "::notice::Filename: ${ZIP_FILENAME:-Missing}"
          printf '%s\n' "::notice::Version: ${ZIP_VERSION:?} - Short commit ID: ${ZIP_SHORT_COMMIT_ID:?} - Is alpha: ${ZIP_IS_ALPHA:?} - Build type: ${ZIP_BUILD_TYPE:?}"
          printf '%s\n' "::notice::Build type supported: ${ZIP_BUILD_TYPE_SUPPORTED:?}"
          printf '%s\n' "::notice::MD5: ${ZIP_MD5:-Missing}"
          printf '%s\n' "::notice::SHA-256: ${ZIP_SHA256:-Missing}"
          printf '%s\n' "::notice::Logs retention days: ${{ github.retention_days }}"
          printf '%s\n' "::notice::Attestation: ${ZIP_ATTESTATION_URL:-Missing}"
          # Preparing temp folder...
          export TMPDIR="${TMPDIR:-${RUNNER_TEMP:-${TMP:-${TEMP:-/tmp}}}}" || exit "${?}"
          our_tmp_dir="$(mktemp -d -t -- "RELEASE-${ZIP_IS_ALPHA:?}-XXXXXX")" || exit "${?}"
          test -n "${our_tmp_dir?}" || exit "${?}"
          rm -r -f -- "${our_tmp_dir:?}"/* || exit "${?}" # Empty our temp dir (should be already empty, but we must be sure)
          # Preparing release notes...
          release_type='release'
          repo_url='${{ github.server_url }}/${{ github.repository }}'
          {
            printf '%s' '**If you want to help me you can donate to me using the `Sponsor` button at the top of '
            printf '%s\n' "[this repository](${repo_url:?})."
            printf '%s\n' 'Donations are appreciated and will always remain optional.**'
            printf '\n'
            if test "${release_type:?}" != 'release'; then
              printf '%s\n\n' "Latest automatically built ZIP ($(date -u -- '+%Y/%m/%d' || :))."
            fi
            printf '%s\n\n' '## Verification'
            test -z "${ZIP_SHA256?}" || printf '%s\n' "SHA-256: ${ZIP_SHA256:?}"
            test -z "${ZIP_ATTESTATION_URL?}" || printf '\n%s\n' "Attestation: ${ZIP_ATTESTATION_URL:?}"
            if test "${release_type:?}" = 'release'; then
              printf '\n'
              printf '%s\n\n' '## Changelog'
              printf '\n%s\n' '[**Changelog**](./CHANGELOG.rst).'
            fi
          } 1> "${our_tmp_dir:?}/release-notes.md" || exit "${?}"
          printf 'ZIP_RELEASE_NOTES=%s\n' "${our_tmp_dir:?}/release-notes.md" 1>> "${GITHUB_OUTPUT?}"
          # Preparing attestation file...
          old_attest_file='${{ steps.attest.outputs.bundle-path }}'
          if test -n "${old_attest_file?}"; then
            new_attest_file="${our_tmp_dir:?}/${release_type:?}-$(basename -- "${old_attest_file:?}")" || exit "${?}"
            cp -f -T -- "${old_attest_file:?}" "${new_attest_file:?}" || exit "${?}"
            printf 'ZIP_ATTESTATION_FILE=%s\n' "${new_attest_file:?}" 1>> "${GITHUB_OUTPUT?}"
          fi
      - name: "Release logic"
        id: "release-logic"
        shell: bash
        run: |
          # Release logic...
          CREATE_RELEASE='false'
          if '${{ github.run_attempt == '1' && steps.build.outputs.ZIP_IS_ALPHA == 'false' && steps.build.outputs.ZIP_BUILD_TYPE_SUPPORTED == 'true' }}'; then
            CREATE_RELEASE='true'
          fi
          printf 'CREATE_RELEASE=%s\n' "${CREATE_RELEASE:?}" 1>> "${GITHUB_OUTPUT?}"
          printf 'Create release? %s\n' "${CREATE_RELEASE:?}"
          # Verifying tag name...
          if '${{ github.event_name == 'workflow_dispatch' && inputs.tag-name != '' }}'; then # The "workflow_call" event still pass as "workflow_dispatch"
            if '${{ startsWith(inputs.tag-name, 'v') }}'; then
              TAG_NAME='${{ inputs.tag-name }}'
            else
              printf '%s\n' '::error::Invalid "tag-name" parameter: ${{ inputs.tag-name }}'
              exit 3
            fi
          elif '${{ startsWith(github.ref, 'refs/tags/v') }}'; then
            TAG_NAME='${{ github.ref_name }}'
          else
            printf '%s\n' '::error::Invalid tag name: ${{ github.ref_name }}'
            exit 4
          fi
          printf 'TAG_NAME=%s\n' "${TAG_NAME:?}" 1>> "${GITHUB_OUTPUT?}"
      - name: "Create release"
        uses: softprops/action-gh-release@v2
        if: "${{ steps.release-logic.outputs.CREATE_RELEASE == 'true' }}"
        with:
          name: "${{ steps.release-logic.outputs.TAG_NAME }}"
          tag_name: "${{ steps.release-logic.outputs.TAG_NAME }}"
          target_commitish: "${{ github.sha }}"
          body_path: "${{ steps.info.outputs.ZIP_RELEASE_NOTES }}"
          append_body: true
          generate_release_notes: true
          draft: false
          overwrite_files: false
          files: |
            ${{ steps.build.outputs.ZIP_FOLDER }}/*.zip*
            ${{ steps.info.outputs.ZIP_ATTESTATION_FILE }}
          fail_on_unmatched_files: true
